"""
Tools used by the `explore_ligpy_results.ipynb` notebook that help with
analysis and plotting.
"""
import os

import cPickle as pickle

import numpy as np


def load_results(path):
    """
    Load the results from the ODE solver, along with the program parameters
    used to generate those results.  The program parameters should be saved
    in the `prog_params.pkl` file generated by `ligpy.py`.  The model species
    concentration results should be in the same format as those output by
    DDASAC (see the ligpy/sample_files/ folder for an example).

    Parameters
    ----------
    path  : str
            path to the folder that contains `/results_dir/`, where the *.out
            files (model results) and `prog_params.pkl` are saved.

    Returns
    -------
    end_time         : float
                       the pyrolysis end time in seconds (excludes cool-down
                       time)
    output_time_step : float
                       the time step at which results were saved (sec)
    initial_T        : float
                       initial temperature (K)
    heating_rate     : float
                       the heating rate (K/min)
    max_T            : float
                       maximum temperature of pyrolysis (K)
    atol             : float
                       absolute tolerance used by the ODE solver
    rtol             : float
                       relative tolerance used by the ODE solver
    plant            : str
                       the name of the lignin species modeled
    cool_time        : int
                       the time (s) to cool down after an isothermal hold
    y                : numpy matrix
                       a matrix with the concentrations of each species in the
                       kinetic scheme for every time in `t` (mol/L)
    t                : numpy array
                       array with all the times (s) corresponding to entries in
                       `y` and `T`
    T                : numpy array
                       array with the temperature (K) at every time in `t`
    specieslist      : list
                       a list of all the species participating in the model
    speciesindices   : dict
                       dictionary where species names are keys and values are
                       the index in `y` that corresponds to that species
    indices_to_species : dict
                         the opposite of speciesindices


    """
    rpath = path + '/results_dir'
    if not os.path.exists(rpath):
        raise ValueError('Please specify a valid directory with a'
                         ' results_dir folder.')
    with open(rpath + '/prog_params.pkl', 'rb') as params:
        prog_params = pickle.load(params)

    end_time = prog_params[0]
    output_time_step = prog_params[1]
    initial_T = prog_params[2]
    heating_rate = prog_params[3]
    max_T = prog_params[4]
    atol = prog_params[5]
    rtol = prog_params[6]
    plant = prog_params[7]
    cool_time = prog_params[8]

    if not os.path.isfile(rpath + '/ddasac_results_1.out'):
        raise IOError('There is not a valid DDASAC .out file.')

    # Determine the order that species are listed in the DDASAC model.c file
    with open(path + '/model.c', 'rb') as modelc:
        body = modelc.read()
        spos = body.find('enum {')
        modelc.seek(spos+6)
        # this includes the species list that I want to find
        listiwant = modelc.read(1000)
        # this is the list of all the species in the DDASAC model
        species_ddasac = ''
        for i, char in enumerate(listiwant):
            if char == '}':
                species_ddasac = listiwant[:i]
                break

    # Build a list of species from this string of species
    species_ddasac = species_ddasac.replace('\n', '').replace(' ', '')
    specieslist_ddasac = []
    for s in species_ddasac.split(','):
        specieslist_ddasac.append(s)

    # Build dictionaries of corresponding indices (these indices from DDASAC's
    # output are different from those from `ligpy_utils.get_speciesindices()`)
    speciesindices_ddasac = {}
    for i, species in enumerate(specieslist_ddasac):
        speciesindices_ddasac[species] = i
    indices_to_species_ddasac = dict(zip(speciesindices_ddasac.values(),
                                         speciesindices_ddasac.keys()))
    # Sort to make sure legends will always be the same
    specieslist_ddasac.sort()

    # Read the first DDASAC results file
    file1 = rpath + '/ddasac_results_1.out'
    t, y, T = read_results_files(file1, specieslist_ddasac)
    # Check to see if a temperature ramp was followed by an isothermal stage
    try:
        file2 = rpath + '/ddasac_results_2.out'
        t2, y2, T2 = read_results_files(file2, specieslist_ddasac)
        y = np.concatenate((y, y2[1:]))
        t = np.concatenate((t, t[-1]+t2[1:]))
        T = np.concatenate((T, T2[1:]))
    except IOError:
        print 'There is not a second DDASAC results file (isothermal hold)'
    # Check to see if a cool down phase was included
    try:
        file3 = rpath + '/ddasac_results_3.out'
        t3, y3, T3 = read_results_files(file3, specieslist_ddasac)
        y = np.concatenate((y, y3[1:]))
        t = np.concatenate((t, t[-1]+t3[1:]))
        T = np.concatenate((T, T3[1:]))
    except IOError:
        print 'There is not a third DDASAC results file (cool down period)'

    return [end_time, output_time_step, initial_T, heating_rate, max_T, atol,
            rtol, plant, cool_time, y, t, T, specieslist_ddasac,
            speciesindices_ddasac, indices_to_species_ddasac]


def read_results_files(filename, specieslist_ddasac):
    """
    Read and process the DDASAC *.out results files so they can be
    combined.

    Parameters
    ----------
    filename           : str
                         the filename of the *.out file (including relative
                         or absolute path)
    specieslist_ddasac : list
                         the specieslist_ddasac object from load_results()

    Returns
    -------
    t : numpy array
        an array with the output time (s) for each entry in the
        concentration or temperature arrays
    y : numpy matrix
        a matrix with the concentrations of each species in the model for
        every timepoint in `t` (mol/L)
    T : numpy array
        an array with the temperature at evey timepoint in `
    """
    with open(filename, 'r') as result:
        # There are 6 lines of descriptive text at the end of file
        num_lines = sum(1 for line in result) - 7
        t = np.zeros((num_lines, 1), dtype='float64')
        T = np.zeros((num_lines, 1), dtype='float64')
        y = np.zeros((num_lines, len(specieslist_ddasac)), dtype='float64')

    with open(filename, 'r') as result:
        for i, line in enumerate(result.readlines()):
            if 1 <= i < num_lines + 1:
                t[i-1] = line.split('\t')[0].split(' ')[1]
                T[i-1] = line.split('\t')[-2]
                for j, concentration in enumerate(line.split('\t')[1:-2]):
                    y[i-1, j] = concentration

    return t, y, T
